generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[] 
  sessions      Session[]
  posts         Post[]
  employees     Employee[] // A user can be related to multiple employees (if they manage them)
  password      String
}

model Employee {
  id             String   @id @default(cuid())
  firstName      String
  lastName       String
  telephone      Int?
  email          String   @unique
  status         Boolean
  user           User?    @relation(fields: [userId], references: [id])
  userId         String?  // Nullable if not all employees are managed by a user
  departments    EmployeeDepartments[] // Many-to-many relation with departments
}

model Department {
  id             String   @id @default(cuid())
  name           String   @unique
  status         String
  employees      EmployeeDepartments[] // Many-to-many relation with employees
}

model EmployeeDepartments {
  employeeId     String
  departmentId   String
  employee       Employee @relation(fields: [employeeId], references: [id])
  department     Department @relation(fields: [departmentId], references: [id])

  @@id([employeeId, departmentId]) // Composite key for the many-to-many relationship
}

model Post {
  id             Int      @id @default(autoincrement())
  name           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      User     @relation(fields: [createdById], references: [id])
  createdById    String
  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
